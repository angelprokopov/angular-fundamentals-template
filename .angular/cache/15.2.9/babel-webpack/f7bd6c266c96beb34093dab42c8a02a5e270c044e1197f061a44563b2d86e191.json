{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./courses.service\";\nexport class CoursesStoreService {\n  constructor(coursesService) {\n    this.coursesService = coursesService;\n    this.courses$$ = new BehaviorSubject([]); // Private BehaviorSubject for courses\n    this.isLoading$$ = new BehaviorSubject(false); // Private BehaviorSubject for loading state\n    // Public Observables to expose the BehaviorSubjects\n    this.courses$ = this.courses$$.asObservable();\n    this.isLoading$ = this.isLoading$$.asObservable();\n  }\n  getAll() {\n    this.isLoading$$.next(true); // Set loading to true\n    this.coursesService.getAll().subscribe({\n      next: courses => {\n        this.courses$$.next(courses); // Store fetched courses\n        this.isLoading$$.next(false); // Set loading to false\n      },\n\n      error: err => {\n        this.isLoading$$.next(false); // Set loading to false\n        console.error(err); // Log error\n      }\n    });\n  }\n\n  createCourse(course) {\n    this.isLoading$$.next(true); // Set loading to true\n    this.coursesService.createCourse(course).subscribe({\n      next: newCourse => {\n        const currentCourses = this.courses$$.getValue(); // Get current courses\n        this.courses$$.next([...currentCourses, newCourse]); // Add new course to local store\n        this.isLoading$$.next(false); // Set loading to false\n      },\n\n      error: err => {\n        this.isLoading$$.next(false); // Set loading to false\n        console.error(err); // Log error\n      }\n    });\n  }\n\n  editCourse(id, course) {\n    this.isLoading$$.next(true); // Set loading to true\n    this.coursesService.editCourse(id, course).subscribe({\n      next: updatedCourse => {\n        const currentCourses = this.courses$$.getValue();\n        const updatedCourses = currentCourses.map(c => c.id === id ? updatedCourse : c); // Update course in local store\n        this.courses$$.next(updatedCourses); // Update the BehaviorSubject\n        this.isLoading$$.next(false); // Set loading to false\n      },\n\n      error: err => {\n        this.isLoading$$.next(false); // Set loading to false\n        console.error(err); // Log error\n      }\n    });\n  }\n\n  getCourse(id) {\n    return this.courses$$.getValue().find(course => course.id === id); // Retrieve course from local store\n  }\n\n  deleteCourse(id) {\n    this.isLoading$$.next(true); // Set loading to true\n    this.coursesService.deleteCourse(id).subscribe({\n      next: () => {\n        const currentCourses = this.courses$$.getValue();\n        this.courses$$.next(currentCourses.filter(course => course.id !== id)); // Remove course from local store\n        this.isLoading$$.next(false); // Set loading to false\n      },\n\n      error: err => {\n        this.isLoading$$.next(false); // Set loading to false\n        console.error(err); // Log error\n      }\n    });\n  }\n\n  filterCourses(value) {\n    return this.courses$.pipe(map(courses => courses.filter(course => course.title.includes(value) || course.description.includes(value)))); // Emit filtered courses\n  }\n\n  getAllAuthors() {\n    return this.coursesService.getAllAuthors(); // Directly use the courses service method\n  }\n\n  createAuthor(name) {\n    return this.coursesService.createAuthor(name); // Directly use the courses service method\n  }\n\n  getAuthorById(id) {\n    return this.coursesService.getAuthorById(id); // Directly use the courses service method\n  }\n}\n\nCoursesStoreService.ɵfac = function CoursesStoreService_Factory(t) {\n  return new (t || CoursesStoreService)(i0.ɵɵinject(i1.CoursesService));\n};\nCoursesStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesStoreService,\n  factory: CoursesStoreService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","CoursesStoreService","constructor","coursesService","courses$$","asObservable","isLoading$$","getAll","next","subscribe","courses","error","err","console","createCourse","course","newCourse","currentCourses","getValue","editCourse","id","updatedCourse","updatedCourses","map","c","getCourse","find","deleteCourse","filter","filterCourses","value","courses$","pipe","title","includes","description","getAllAuthors","createAuthor","name","getAuthorById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Duev\\Desktop\\EPAM-ACADEMY\\FRONT-END-SPECIALIZATION\\ANGULAR\\angular-fundamentals-template\\src\\app\\services\\courses-store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { CoursesService } from './courses.service';\r\nimport { Course } from '../model'; // Adjust the import path as needed\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CoursesStoreService {\r\n  private courses$$ = new BehaviorSubject<Course[]>([]); // Private BehaviorSubject for courses\r\n  private isLoading$$ = new BehaviorSubject<boolean>(false); // Private BehaviorSubject for loading state\r\n\r\n  // Public Observables to expose the BehaviorSubjects\r\n  public courses$ = this.courses$$.asObservable();\r\n  public isLoading$ = this.isLoading$$.asObservable();\r\n\r\n  constructor(private coursesService: CoursesService) {}\r\n\r\n  getAll(): void {\r\n    this.isLoading$$.next(true); // Set loading to true\r\n    this.coursesService.getAll().subscribe({\r\n      next: (courses) => {\r\n        this.courses$$.next(courses); // Store fetched courses\r\n        this.isLoading$$.next(false); // Set loading to false\r\n      },\r\n      error: (err) => {\r\n        this.isLoading$$.next(false); // Set loading to false\r\n        console.error(err); // Log error\r\n      }\r\n    });\r\n  }\r\n\r\n  createCourse(course: Course): void {\r\n    this.isLoading$$.next(true); // Set loading to true\r\n    this.coursesService.createCourse(course).subscribe({\r\n      next: (newCourse) => {\r\n        const currentCourses = this.courses$$.getValue(); // Get current courses\r\n        this.courses$$.next([...currentCourses, newCourse]); // Add new course to local store\r\n        this.isLoading$$.next(false); // Set loading to false\r\n      },\r\n      error: (err) => {\r\n        this.isLoading$$.next(false); // Set loading to false\r\n        console.error(err); // Log error\r\n      }\r\n    });\r\n  }\r\n\r\n  editCourse(id: string, course: Course): void {\r\n    this.isLoading$$.next(true); // Set loading to true\r\n    this.coursesService.editCourse(id, course).subscribe({\r\n      next: (updatedCourse) => {\r\n        const currentCourses = this.courses$$.getValue();\r\n        const updatedCourses = currentCourses.map(c => c.id === id ? updatedCourse : c); // Update course in local store\r\n        this.courses$$.next(updatedCourses); // Update the BehaviorSubject\r\n        this.isLoading$$.next(false); // Set loading to false\r\n      },\r\n      error: (err) => {\r\n        this.isLoading$$.next(false); // Set loading to false\r\n        console.error(err); // Log error\r\n      }\r\n    });\r\n  }\r\n\r\n  getCourse(id: string): Course | undefined {\r\n    return this.courses$$.getValue().find(course => course.id === id); // Retrieve course from local store\r\n  }\r\n\r\n  deleteCourse(id: string): void {\r\n    this.isLoading$$.next(true); // Set loading to true\r\n    this.coursesService.deleteCourse(id).subscribe({\r\n      next: () => {\r\n        const currentCourses = this.courses$$.getValue();\r\n        this.courses$$.next(currentCourses.filter(course => course.id !== id)); // Remove course from local store\r\n        this.isLoading$$.next(false); // Set loading to false\r\n      },\r\n      error: (err) => {\r\n        this.isLoading$$.next(false); // Set loading to false\r\n        console.error(err); // Log error\r\n      }\r\n    });\r\n  }\r\n\r\n  filterCourses(value: string): Observable<Course[]> {\r\n    return this.courses$.pipe(\r\n      map(courses => \r\n        courses.filter(course => \r\n          course.title.includes(value) || course.description.includes(value)\r\n        )\r\n      )\r\n    ); // Emit filtered courses\r\n  }\r\n\r\n  getAllAuthors(): Observable<any[]> {\r\n    return this.coursesService.getAllAuthors(); // Directly use the courses service method\r\n  }\r\n\r\n  createAuthor(name: string): Observable<any> {\r\n    return this.coursesService.createAuthor(name); // Directly use the courses service method\r\n  }\r\n\r\n  getAuthorById(id: string): Observable<any> {\r\n    return this.coursesService.getAuthorById(id); // Directly use the courses service method\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}