{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./session-storage.service\";\nexport class AuthService {\n  constructor(http, sessionStorage) {\n    this.http = http;\n    this.sessionStorage = sessionStorage;\n    this.isAuthorized$$ = new BehaviorSubject(false); // Private BehaviorSubject to track authorization state\n    this.isAuthorized$ = this.isAuthorized$$.asObservable(); // Public Observable to expose authorization state\n    this.apiUrl = \"http://localhost:4000/api\"; // Base API URL, adjust based on your environment\n    // Initialize authorization state based on session storage\n    this.isAuthorized$$.next(!!this.sessionStorage.getToken());\n  }\n  login(user) {\n    return this.http.post(`${this.apiUrl}/login`, user).pipe(map(response => {\n      if (response.token) {\n        this.sessionStorage.setToken(response.token);\n        this.isAuthorized$$.next(true); // Update authorization state\n      }\n\n      return response;\n    }));\n  }\n  logout() {\n    this.sessionStorage.deleteToken();\n    this.isAuthorized$$.next(false); // Update authorization state\n  }\n\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  get isAuthorised() {\n    return this.isAuthorized$$.value;\n  }\n  set isAuthorised(value) {\n    this.isAuthorized$$.next(value);\n  }\n  getLoginUrl() {\n    return `${this.apiUrl}/login`;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;;AAMpC,OAAM,MAAOC,WAAW;EAMpBC,YACYC,IAAgB,EAChBC,cAAqC;IADrC,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAPlB,mBAAc,GAAG,IAAIL,eAAe,CAAU,KAAK,CAAC,CAAC,CAAC;IACvD,kBAAa,GAAG,IAAI,CAACM,cAAc,CAACC,YAAY,EAAE,CAAC,CAAC;IAEnD,WAAM,GAAG,2BAA2B,CAAC,CAAC;IAM1C;IACA,IAAI,CAACD,cAAc,CAACE,IAAI,CAAC,CAAC,CAAC,IAAI,CAACH,cAAc,CAACI,QAAQ,EAAE,CAAC;EAC9D;EAEAC,KAAK,CAACC,IAAyC;IAC3C,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEF,IAAI,CAAC,CAACG,IAAI,CACpDb,GAAG,CAAEc,QAAa,IAAI;MAClB,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAChB,IAAI,CAACX,cAAc,CAACY,QAAQ,CAACF,QAAQ,CAACC,KAAK,CAAC;QAC5C,IAAI,CAACV,cAAc,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;;MAEpC,OAAOO,QAAQ;IACnB,CAAC,CAAC,CACL;EACL;EAEAG,MAAM;IACF,IAAI,CAACb,cAAc,CAACc,WAAW,EAAE;IACjC,IAAI,CAACb,cAAc,CAACE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EACrC;;EAEAY,QAAQ,CAACT,IAAyC;IAC9C,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,WAAW,EAAEF,IAAI,CAAC;EAC1D;EAEA,IAAIU,YAAY;IACZ,OAAO,IAAI,CAACf,cAAc,CAACgB,KAAK;EACpC;EAEA,IAAID,YAAY,CAACC,KAAc;IAC3B,IAAI,CAAChB,cAAc,CAACE,IAAI,CAACc,KAAK,CAAC;EACnC;EAEAC,WAAW;IACP,OAAO,GAAG,IAAI,CAACV,MAAM,QAAQ;EACjC;;AA7CSX,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;EAAAuB,YAFR;AAAM","names":["BehaviorSubject","map","AuthService","constructor","http","sessionStorage","isAuthorized$$","asObservable","next","getToken","login","user","post","apiUrl","pipe","response","token","setToken","logout","deleteToken","register","isAuthorised","value","getLoginUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Duev\\Desktop\\EPAM-ACADEMY\\FRONT-END-SPECIALIZATION\\ANGULAR\\angular-fundamentals-template\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { SessionStorageService } from \"./session-storage.service\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class AuthService {\r\n    private isAuthorized$$ = new BehaviorSubject<boolean>(false); // Private BehaviorSubject to track authorization state\r\n    public isAuthorized$ = this.isAuthorized$$.asObservable(); // Public Observable to expose authorization state\r\n\r\n    private apiUrl = \"http://localhost:4000/api\"; // Base API URL, adjust based on your environment\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private sessionStorage: SessionStorageService\r\n    ) {\r\n        // Initialize authorization state based on session storage\r\n        this.isAuthorized$$.next(!!this.sessionStorage.getToken());\r\n    }\r\n\r\n    login(user: { email: string; password: string }): Observable<any> {\r\n        return this.http.post(`${this.apiUrl}/login`, user).pipe(\r\n            map((response: any) => {\r\n                if (response.token) {\r\n                    this.sessionStorage.setToken(response.token);\r\n                    this.isAuthorized$$.next(true); // Update authorization state\r\n                }\r\n                return response;\r\n            })\r\n        );\r\n    }\r\n\r\n    logout(): void {\r\n        this.sessionStorage.deleteToken();\r\n        this.isAuthorized$$.next(false); // Update authorization state\r\n    }\r\n\r\n    register(user: { email: string; password: string }): Observable<any> {\r\n        return this.http.post(`${this.apiUrl}/register`, user);\r\n    }\r\n\r\n    get isAuthorised(): boolean {\r\n        return this.isAuthorized$$.value;\r\n    }\r\n\r\n    set isAuthorised(value: boolean) {\r\n        this.isAuthorized$$.next(value);\r\n    }\r\n\r\n    getLoginUrl(): string {\r\n        return `${this.apiUrl}/login`;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}