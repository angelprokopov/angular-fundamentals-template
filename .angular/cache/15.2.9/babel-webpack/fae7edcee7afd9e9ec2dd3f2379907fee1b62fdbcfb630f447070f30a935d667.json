{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class NotAuthorizedGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    if (!this.authService.isAuthorised) {\n      // If the user is not authorized, allow access\n      return true;\n    } else {\n      // If the user is authorized, redirect to /courses\n      return this.router.createUrlTree([\"/courses\"]);\n    }\n  }\n}\nNotAuthorizedGuard.ɵfac = function NotAuthorizedGuard_Factory(t) {\n  return new (t || NotAuthorizedGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nNotAuthorizedGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NotAuthorizedGuard,\n  factory: NotAuthorizedGuard.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,kBAAkB;EAC3BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW;IAKP,IAAI,CAAC,IAAI,CAACF,WAAW,CAACG,YAAY,EAAE;MAChC;MACA,OAAO,IAAI;KACd,MAAM;MACH;MACA,OAAO,IAAI,CAACF,MAAM,CAACG,aAAa,CAAC,CAAC,UAAU,CAAC,CAAC;;EAEtD;;AAfSN,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAO,SAAlBP,kBAAkB;EAAAQ,YAFf;AAAM","names":["NotAuthorizedGuard","constructor","authService","router","canActivate","isAuthorised","createUrlTree","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Duev\\Desktop\\EPAM-ACADEMY\\FRONT-END-SPECIALIZATION\\ANGULAR\\angular-fundamentals-template\\src\\app\\auth\\guards\\not-authorized.guard.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, Router, UrlTree } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService } from \"../services/auth.service\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class NotAuthorizedGuard implements CanActivate {\r\n    constructor(private authService: AuthService, private router: Router) {}\r\n\r\n    canActivate():\r\n        | Observable<boolean | UrlTree>\r\n        | Promise<boolean | UrlTree>\r\n        | boolean\r\n        | UrlTree {\r\n        if (!this.authService.isAuthorised) {\r\n            // If the user is not authorized, allow access\r\n            return true;\r\n        } else {\r\n            // If the user is authorized, redirect to /courses\r\n            return this.router.createUrlTree([\"/courses\"]);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}