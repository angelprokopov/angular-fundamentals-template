{"ast":null,"code":"import { BehaviorSubject, Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./courses.service\";\nexport class CoursesStoreService {\n  constructor(coursesService) {\n    this.coursesService = coursesService;\n    this.courses = []; // Local store for courses\n    this.loadingSubject = new BehaviorSubject(false); // Loading state\n    this.loading$ = this.loadingSubject.asObservable(); // Expose loading state as observable\n  }\n\n  getAll() {\n    this.loadingSubject.next(true); // Set loading to true\n    return new Observable(observer => {\n      this.coursesService.getAll().subscribe({\n        next: courses => {\n          this.courses = courses; // Store fetched courses\n          this.loadingSubject.next(false); // Set loading to false\n          observer.next(courses);\n          observer.complete();\n        },\n        error: err => {\n          this.loadingSubject.next(false); // Set loading to false\n          observer.error(err); // Pass error to observer\n        }\n      });\n    });\n  }\n\n  createCourse(course) {\n    this.loadingSubject.next(true); // Set loading to true\n    return new Observable(observer => {\n      this.coursesService.createCourse(course).subscribe({\n        next: newCourse => {\n          this.courses.push(newCourse); // Add new course to local store\n          this.loadingSubject.next(false); // Set loading to false\n          observer.next(newCourse);\n          observer.complete();\n        },\n        error: err => {\n          this.loadingSubject.next(false); // Set loading to false\n          observer.error(err); // Pass error to observer\n        }\n      });\n    });\n  }\n\n  editCourse(id, course) {\n    this.loadingSubject.next(true); // Set loading to true\n    return new Observable(observer => {\n      this.coursesService.editCourse(id, course).subscribe({\n        next: updatedCourse => {\n          const index = this.courses.findIndex(c => c.id === id);\n          if (index !== -1) {\n            this.courses[index] = updatedCourse; // Update course in local store\n          }\n\n          this.loadingSubject.next(false); // Set loading to false\n          observer.next(updatedCourse);\n          observer.complete();\n        },\n        error: err => {\n          this.loadingSubject.next(false); // Set loading to false\n          observer.error(err); // Pass error to observer\n        }\n      });\n    });\n  }\n\n  getCourse(id) {\n    return this.courses.find(course => course.id === id); // Retrieve course from local store\n  }\n\n  deleteCourse(id) {\n    this.loadingSubject.next(true); // Set loading to true\n    return new Observable(observer => {\n      this.coursesService.deleteCourse(id).subscribe({\n        next: response => {\n          this.courses = this.courses.filter(course => course.id !== id); // Remove course from local store\n          this.loadingSubject.next(false); // Set loading to false\n          observer.next(response);\n          observer.complete();\n        },\n        error: err => {\n          this.loadingSubject.next(false); // Set loading to false\n          observer.error(err); // Pass error to observer\n        }\n      });\n    });\n  }\n\n  filterCourses(value) {\n    const filteredCourses = this.courses.filter(course => course.title.includes(value) || course.description.includes(value));\n    return new Observable(observer => {\n      observer.next(filteredCourses); // Emit filtered courses\n      observer.complete();\n    });\n  }\n  getAllAuthors() {\n    return this.coursesService.getAllAuthors(); // Directly use the courses service method\n  }\n\n  createAuthor(name) {\n    return this.coursesService.createAuthor(name); // Directly use the courses service method\n  }\n\n  getAuthorById(id) {\n    return this.coursesService.getAuthorById(id); // Directly use the courses service method\n  }\n}\n\nCoursesStoreService.ɵfac = function CoursesStoreService_Factory(t) {\n  return new (t || CoursesStoreService)(i0.ɵɵinject(i1.CoursesService));\n};\nCoursesStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesStoreService,\n  factory: CoursesStoreService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","Observable","CoursesStoreService","constructor","coursesService","loadingSubject","asObservable","getAll","next","observer","subscribe","courses","complete","error","err","createCourse","course","newCourse","push","editCourse","id","updatedCourse","index","findIndex","c","getCourse","find","deleteCourse","response","filter","filterCourses","value","filteredCourses","title","includes","description","getAllAuthors","createAuthor","name","getAuthorById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Duev\\Desktop\\EPAM-ACADEMY\\FRONT-END-SPECIALIZATION\\ANGULAR\\angular-fundamentals-template\\src\\app\\services\\courses-store.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { CoursesService } from \"./courses.service\";\r\nimport { Course } from \"./course.model\"; // Adjust the import path as needed\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class CoursesStoreService {\r\n    private courses: Course[] = []; // Local store for courses\r\n    private loadingSubject = new BehaviorSubject<boolean>(false); // Loading state\r\n    loading$ = this.loadingSubject.asObservable(); // Expose loading state as observable\r\n\r\n    constructor(private coursesService: CoursesService) {}\r\n\r\n    getAll(): Observable<Course[]> {\r\n        this.loadingSubject.next(true); // Set loading to true\r\n        return new Observable<Course[]>((observer) => {\r\n            this.coursesService.getAll().subscribe({\r\n                next: (courses) => {\r\n                    this.courses = courses; // Store fetched courses\r\n                    this.loadingSubject.next(false); // Set loading to false\r\n                    observer.next(courses);\r\n                    observer.complete();\r\n                },\r\n                error: (err) => {\r\n                    this.loadingSubject.next(false); // Set loading to false\r\n                    observer.error(err); // Pass error to observer\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    createCourse(course: Course): Observable<Course> {\r\n        this.loadingSubject.next(true); // Set loading to true\r\n        return new Observable<Course>((observer) => {\r\n            this.coursesService.createCourse(course).subscribe({\r\n                next: (newCourse) => {\r\n                    this.courses.push(newCourse); // Add new course to local store\r\n                    this.loadingSubject.next(false); // Set loading to false\r\n                    observer.next(newCourse);\r\n                    observer.complete();\r\n                },\r\n                error: (err) => {\r\n                    this.loadingSubject.next(false); // Set loading to false\r\n                    observer.error(err); // Pass error to observer\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    editCourse(id: string, course: Course): Observable<Course> {\r\n        this.loadingSubject.next(true); // Set loading to true\r\n        return new Observable<Course>((observer) => {\r\n            this.coursesService.editCourse(id, course).subscribe({\r\n                next: (updatedCourse) => {\r\n                    const index = this.courses.findIndex((c) => c.id === id);\r\n                    if (index !== -1) {\r\n                        this.courses[index] = updatedCourse; // Update course in local store\r\n                    }\r\n                    this.loadingSubject.next(false); // Set loading to false\r\n                    observer.next(updatedCourse);\r\n                    observer.complete();\r\n                },\r\n                error: (err) => {\r\n                    this.loadingSubject.next(false); // Set loading to false\r\n                    observer.error(err); // Pass error to observer\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    getCourse(id: string): Course | undefined {\r\n        return this.courses.find((course) => course.id === id); // Retrieve course from local store\r\n    }\r\n\r\n    deleteCourse(id: string): Observable<any> {\r\n        this.loadingSubject.next(true); // Set loading to true\r\n        return new Observable<any>((observer) => {\r\n            this.coursesService.deleteCourse(id).subscribe({\r\n                next: (response) => {\r\n                    this.courses = this.courses.filter(\r\n                        (course) => course.id !== id\r\n                    ); // Remove course from local store\r\n                    this.loadingSubject.next(false); // Set loading to false\r\n                    observer.next(response);\r\n                    observer.complete();\r\n                },\r\n                error: (err) => {\r\n                    this.loadingSubject.next(false); // Set loading to false\r\n                    observer.error(err); // Pass error to observer\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    filterCourses(value: string): Observable<Course[]> {\r\n        const filteredCourses = this.courses.filter(\r\n            (course) =>\r\n                course.title.includes(value) ||\r\n                course.description.includes(value)\r\n        );\r\n        return new Observable<Course[]>((observer) => {\r\n            observer.next(filteredCourses); // Emit filtered courses\r\n            observer.complete();\r\n        });\r\n    }\r\n\r\n    getAllAuthors(): Observable<any[]> {\r\n        return this.coursesService.getAllAuthors(); // Directly use the courses service method\r\n    }\r\n\r\n    createAuthor(name: string): Observable<any> {\r\n        return this.coursesService.createAuthor(name); // Directly use the courses service method\r\n    }\r\n\r\n    getAuthorById(id: string): Observable<any> {\r\n        return this.coursesService.getAuthorById(id); // Directly use the courses service method\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}