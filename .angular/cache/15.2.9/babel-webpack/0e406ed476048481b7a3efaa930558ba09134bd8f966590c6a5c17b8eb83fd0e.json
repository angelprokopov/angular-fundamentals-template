{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { map } from \"rxjs/operators\"; // Import the map operator\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./courses.service\";\nexport class CoursesStoreService {\n  constructor(coursesService) {\n    this.coursesService = coursesService;\n    this.courses$$ = new BehaviorSubject([]); // Private BehaviorSubject for courses\n    this.isLoading$$ = new BehaviorSubject(false); // Private BehaviorSubject for loading state\n    // Public Observables to expose the BehaviorSubjects\n    this.courses$ = this.courses$$.asObservable();\n    this.isLoading$ = this.isLoading$$.asObservable();\n  }\n  getAll() {\n    this.isLoading$$.next(true); // Set loading to true\n    this.coursesService.getAll().subscribe({\n      next: courses => {\n        this.courses$$.next(courses); // Store fetched courses\n        this.isLoading$$.next(false); // Set loading to false\n      },\n\n      error: err => {\n        this.isLoading$$.next(false); // Set loading to false\n        console.error(err); // Log error\n      }\n    });\n  }\n  // Method to filter courses based on a search term and update courses$$\n  searchCourses(value) {\n    this.coursesService.getAll().subscribe({\n      next: courses => {\n        const filteredCourses = courses.filter(course => course.title.toLowerCase().includes(value.toLowerCase()) || course.description.toLowerCase().includes(value.toLowerCase()));\n        this.courses$$.next(filteredCourses); // Update the BehaviorSubject with filtered courses\n      }\n    });\n  }\n\n  createCourse(course) {\n    this.isLoading$$.next(true); // Set loading to true\n    this.coursesService.createCourse(course).subscribe({\n      next: newCourse => {\n        const currentCourses = this.courses$$.getValue(); // Get current courses\n        this.courses$$.next([...currentCourses, newCourse]); // Add new course to local store\n        this.isLoading$$.next(false); // Set loading to false\n      },\n\n      error: err => {\n        this.isLoading$$.next(false); // Set loading to false\n        console.error(err); // Log error\n      }\n    });\n  }\n\n  editCourse(id, course) {\n    this.isLoading$$.next(true); // Set loading to true\n    this.coursesService.editCourse(id, course).subscribe({\n      next: updatedCourse => {\n        const currentCourses = this.courses$$.getValue();\n        const updatedCourses = currentCourses.map(c => c.id === id ? updatedCourse : c); // Update course in local store\n        this.courses$$.next(updatedCourses); // Update the BehaviorSubject\n        this.isLoading$$.next(false); // Set loading to false\n      },\n\n      error: err => {\n        this.isLoading$$.next(false); // Set loading to false\n        console.error(err); // Log error\n      }\n    });\n  }\n\n  getCourse(id) {\n    return this.courses$$.getValue().find(course => course.id === id); // Retrieve course from local store\n  }\n\n  deleteCourse(id) {\n    this.isLoading$$.next(true); // Set loading to true\n    this.coursesService.deleteCourse(id).subscribe({\n      next: () => {\n        const currentCourses = this.courses$$.getValue();\n        this.courses$$.next(currentCourses.filter(course => course.id !== id)); // Remove course from local store\n        this.isLoading$$.next(false); // Set loading to false\n      },\n\n      error: err => {\n        this.isLoading$$.next(false); // Set loading to false\n        console.error(err); // Log error\n      }\n    });\n  }\n\n  filterCourses(value) {\n    return this.courses$.pipe(map(courses => courses.filter(course => course.title.includes(value) || course.description.includes(value)))); // Emit filtered courses\n  }\n\n  getAllAuthors() {\n    return this.coursesService.getAllAuthors(); // Directly use the courses service method\n  }\n\n  createAuthor(name) {\n    return this.coursesService.createAuthor(name); // Directly use the courses service method\n  }\n\n  getAuthorById(id) {\n    return this.coursesService.getAuthorById(id); // Directly use the courses service method\n  }\n}\n\nCoursesStoreService.ɵfac = function CoursesStoreService_Factory(t) {\n  return new (t || CoursesStoreService)(i0.ɵɵinject(i1.CoursesService));\n};\nCoursesStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesStoreService,\n  factory: CoursesStoreService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","CoursesStoreService","constructor","coursesService","courses$$","asObservable","isLoading$$","getAll","next","subscribe","courses","error","err","console","searchCourses","value","filteredCourses","filter","course","title","toLowerCase","includes","description","createCourse","newCourse","currentCourses","getValue","editCourse","id","updatedCourse","updatedCourses","c","getCourse","find","deleteCourse","filterCourses","courses$","pipe","getAllAuthors","createAuthor","name","getAuthorById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Duev\\Desktop\\EPAM-ACADEMY\\FRONT-END-SPECIALIZATION\\ANGULAR\\angular-fundamentals-template\\src\\app\\services\\courses-store.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\"; // Import the map operator\r\nimport { CoursesService } from \"./courses.service\";\r\nimport { Course } from \"../models\"; // Adjust the import path as needed\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class CoursesStoreService {\r\n    private courses$$ = new BehaviorSubject<Course[]>([]); // Private BehaviorSubject for courses\r\n    private isLoading$$ = new BehaviorSubject<boolean>(false); // Private BehaviorSubject for loading state\r\n\r\n    // Public Observables to expose the BehaviorSubjects\r\n    public courses$ = this.courses$$.asObservable();\r\n    public isLoading$ = this.isLoading$$.asObservable();\r\n\r\n    constructor(private coursesService: CoursesService) {}\r\n\r\n    getAll(): void {\r\n        this.isLoading$$.next(true); // Set loading to true\r\n        this.coursesService.getAll().subscribe({\r\n            next: (courses) => {\r\n                this.courses$$.next(courses); // Store fetched courses\r\n                this.isLoading$$.next(false); // Set loading to false\r\n            },\r\n            error: (err) => {\r\n                this.isLoading$$.next(false); // Set loading to false\r\n                console.error(err); // Log error\r\n            },\r\n        });\r\n    }\r\n\r\n    // Method to filter courses based on a search term and update courses$$\r\n    searchCourses(value: string): void {\r\n        this.coursesService.getAll().subscribe({\r\n            next: (courses) => {\r\n                const filteredCourses = courses.filter(\r\n                    (course) =>\r\n                        course.title\r\n                            .toLowerCase()\r\n                            .includes(value.toLowerCase()) ||\r\n                        course.description\r\n                            .toLowerCase()\r\n                            .includes(value.toLowerCase())\r\n                );\r\n                this.courses$$.next(filteredCourses); // Update the BehaviorSubject with filtered courses\r\n            },\r\n        });\r\n    }\r\n\r\n    createCourse(course: Course): void {\r\n        this.isLoading$$.next(true); // Set loading to true\r\n        this.coursesService.createCourse(course).subscribe({\r\n            next: (newCourse) => {\r\n                const currentCourses = this.courses$$.getValue(); // Get current courses\r\n                this.courses$$.next([...currentCourses, newCourse]); // Add new course to local store\r\n                this.isLoading$$.next(false); // Set loading to false\r\n            },\r\n            error: (err) => {\r\n                this.isLoading$$.next(false); // Set loading to false\r\n                console.error(err); // Log error\r\n            },\r\n        });\r\n    }\r\n\r\n    editCourse(id: string, course: Course): void {\r\n        this.isLoading$$.next(true); // Set loading to true\r\n        this.coursesService.editCourse(id, course).subscribe({\r\n            next: (updatedCourse) => {\r\n                const currentCourses = this.courses$$.getValue();\r\n                const updatedCourses = currentCourses.map((c) =>\r\n                    c.id === id ? updatedCourse : c\r\n                ); // Update course in local store\r\n                this.courses$$.next(updatedCourses); // Update the BehaviorSubject\r\n                this.isLoading$$.next(false); // Set loading to false\r\n            },\r\n            error: (err) => {\r\n                this.isLoading$$.next(false); // Set loading to false\r\n                console.error(err); // Log error\r\n            },\r\n        });\r\n    }\r\n\r\n    getCourse(id: string): Course | undefined {\r\n        return this.courses$$.getValue().find((course) => course.id === id); // Retrieve course from local store\r\n    }\r\n\r\n    deleteCourse(id: string): void {\r\n        this.isLoading$$.next(true); // Set loading to true\r\n        this.coursesService.deleteCourse(id).subscribe({\r\n            next: () => {\r\n                const currentCourses = this.courses$$.getValue();\r\n                this.courses$$.next(\r\n                    currentCourses.filter((course) => course.id !== id)\r\n                ); // Remove course from local store\r\n                this.isLoading$$.next(false); // Set loading to false\r\n            },\r\n            error: (err) => {\r\n                this.isLoading$$.next(false); // Set loading to false\r\n                console.error(err); // Log error\r\n            },\r\n        });\r\n    }\r\n\r\n    filterCourses(value: string): Observable<Course[]> {\r\n        return this.courses$.pipe(\r\n            map((courses) =>\r\n                courses.filter(\r\n                    (course) =>\r\n                        course.title.includes(value) ||\r\n                        course.description.includes(value)\r\n                )\r\n            )\r\n        ); // Emit filtered courses\r\n    }\r\n\r\n    getAllAuthors(): Observable<any[]> {\r\n        return this.coursesService.getAllAuthors(); // Directly use the courses service method\r\n    }\r\n\r\n    createAuthor(name: string): Observable<any> {\r\n        return this.coursesService.createAuthor(name); // Directly use the courses service method\r\n    }\r\n\r\n    getAuthorById(id: string): Observable<any> {\r\n        return this.coursesService.getAuthorById(id); // Directly use the courses service method\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}