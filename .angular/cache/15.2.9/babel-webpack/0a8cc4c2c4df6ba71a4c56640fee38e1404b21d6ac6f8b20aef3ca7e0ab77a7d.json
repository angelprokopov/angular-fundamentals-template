{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nexport class UserStoreService {\n  constructor(userService) {\n    this.userService = userService;\n    this.name$$ = new BehaviorSubject(null);\n    this.isAdmin$$ = new BehaviorSubject(false);\n    this.name$ = this.name$$.asObservable();\n    this.isAdmin$ = this.isAdmin$$.asObservable();\n  }\n  getUser(userId) {\n    this.userService.getUser(userId).subscribe({\n      next: user => {\n        this.name$$.next(user.name); // Assuming the User model has a 'name' property\n        this.isAdmin$$.next(user.isAdmin); // Assuming the User model has an 'isAdmin' property\n      },\n\n      error: () => {\n        this.name$$.next(null);\n        this.isAdmin$$.next(false);\n      }\n    });\n  }\n  get isAdmin() {\n    return this.isAdmin$$.value; // Access the BehaviorSubject's current value\n  }\n\n  set isAdmin(value) {\n    this.isAdmin$$.next(value); // Update the BehaviorSubject's value\n  }\n}\n\nUserStoreService.ɵfac = function UserStoreService_Factory(t) {\n  return new (t || UserStoreService)(i0.ɵɵinject(i1.UserService));\n};\nUserStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserStoreService,\n  factory: UserStoreService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;;AAOlD,OAAM,MAAOC,gBAAgB;EAWzBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAVvB,WAAM,GAAmC,IAAIH,eAAe,CAElE,IAAI,CAAC;IACC,cAAS,GAA6B,IAAIA,eAAe,CAC7D,KAAK,CACR;IAEM,UAAK,GAAG,IAAI,CAACI,MAAM,CAACC,YAAY,EAAE;IAClC,aAAQ,GAAG,IAAI,CAACC,SAAS,CAACD,YAAY,EAAE;EAEA;EAE/CE,OAAO,CAACC,MAAc;IAClB,IAAI,CAACL,WAAW,CAACI,OAAO,CAACC,MAAM,CAAC,CAACC,SAAS,CAAC;MACvCC,IAAI,EAAGC,IAAU,IAAI;QACjB,IAAI,CAACP,MAAM,CAACM,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;QAC7B,IAAI,CAACN,SAAS,CAACI,IAAI,CAACC,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;MACvC,CAAC;;MACDC,KAAK,EAAE,MAAK;QACR,IAAI,CAACV,MAAM,CAACM,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAACJ,SAAS,CAACI,IAAI,CAAC,KAAK,CAAC;MAC9B;KACH,CAAC;EACN;EAEA,IAAIG,OAAO;IACP,OAAO,IAAI,CAACP,SAAS,CAACS,KAAK,CAAC,CAAC;EACjC;;EAEA,IAAIF,OAAO,CAACE,KAAc;IACtB,IAAI,CAACT,SAAS,CAACI,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC;EAChC;;;AAhCSd,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAe,SAAhBf,gBAAgB;EAAAgB,YAFb;AAAM","names":["BehaviorSubject","UserStoreService","constructor","userService","name$$","asObservable","isAdmin$$","getUser","userId","subscribe","next","user","name","isAdmin","error","value","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Duev\\Desktop\\EPAM-ACADEMY\\FRONT-END-SPECIALIZATION\\ANGULAR\\angular-fundamentals-template\\src\\app\\user\\services\\user-store.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { UserService } from \"./user.service\";\r\nimport { User } from \"../../models\"; // Adjust the import path as necessary\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class UserStoreService {\r\n    private name$$: BehaviorSubject<string | null> = new BehaviorSubject<\r\n        string | null\r\n    >(null);\r\n    private isAdmin$$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(\r\n        false\r\n    );\r\n\r\n    public name$ = this.name$$.asObservable();\r\n    public isAdmin$ = this.isAdmin$$.asObservable();\r\n\r\n    constructor(private userService: UserService) {}\r\n\r\n    getUser(userId: string): void {\r\n        this.userService.getUser(userId).subscribe({\r\n            next: (user: User) => {\r\n                this.name$$.next(user.name); // Assuming the User model has a 'name' property\r\n                this.isAdmin$$.next(user.isAdmin); // Assuming the User model has an 'isAdmin' property\r\n            },\r\n            error: () => {\r\n                this.name$$.next(null);\r\n                this.isAdmin$$.next(false);\r\n            },\r\n        });\r\n    }\r\n\r\n    get isAdmin(): boolean {\r\n        return this.isAdmin$$.value; // Access the BehaviorSubject's current value\r\n    }\r\n\r\n    set isAdmin(value: boolean) {\r\n        this.isAdmin$$.next(value); // Update the BehaviorSubject's value\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}