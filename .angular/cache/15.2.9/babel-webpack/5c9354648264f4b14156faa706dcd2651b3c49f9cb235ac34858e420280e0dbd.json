{"ast":null,"code":"import { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CoursesService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiBaseUrl}/courses`; // Base URL for the courses API\n  }\n\n  getAll() {\n    // Use Course[] instead of any[]\n    return this.http.get(this.apiUrl);\n  }\n  createCourse(course) {\n    // Use Course instead of any\n    return this.http.post(this.apiUrl, course);\n  }\n  editCourse(id, course) {\n    // Use Course instead of any\n    return this.http.put(`${this.apiUrl}/${id}`, course);\n  }\n  getCourse(id) {\n    // Use Course instead of any\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  deleteCourse(id) {\n    // Can keep as any if there's no specific return type\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  filterCourses(value) {\n    // Use Course[] instead of any[]\n    return this.http.get(`${this.apiUrl}?search=${value}`);\n  }\n  getAllAuthors() {\n    // Replace 'any[]' with your specific author interface if defined\n    return this.http.get(`${environment.apiBaseUrl}/authors`);\n  }\n  createAuthor(name) {\n    return this.http.post(`${environment.apiBaseUrl}/authors`, {\n      name\n    });\n  }\n  getAuthorById(id) {\n    // Replace 'any' with your specific author interface if defined\n    return this.http.get(`${environment.apiBaseUrl}/authors/${id}`);\n  }\n}\nCoursesService.ɵfac = function CoursesService_Factory(t) {\n  return new (t || CoursesService)(i0.ɵɵinject(i1.HttpClient));\n};\nCoursesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesService,\n  factory: CoursesService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,cAAc;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,UAAU,UAAU,CAAC,CAAC;EAEf;;EAEvCC,MAAM;IACF;IACA,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAW,IAAI,CAACC,MAAM,CAAC;EAC/C;EAEAC,YAAY,CAACC,MAAc;IACvB;IACA,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAS,IAAI,CAACH,MAAM,EAAEE,MAAM,CAAC;EACtD;EAEAE,UAAU,CAACC,EAAU,EAAEH,MAAc;IACjC;IACA,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAS,GAAG,IAAI,CAACN,MAAM,IAAIK,EAAE,EAAE,EAAEH,MAAM,CAAC;EAChE;EAEAK,SAAS,CAACF,EAAU;IAChB;IACA,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACC,MAAM,IAAIK,EAAE,EAAE,CAAC;EACxD;EAEAG,YAAY,CAACH,EAAU;IACnB;IACA,OAAO,IAAI,CAACT,IAAI,CAACa,MAAM,CAAS,GAAG,IAAI,CAACT,MAAM,IAAIK,EAAE,EAAE,CAAC;EAC3D;EAEAK,aAAa,CAACC,KAAa;IACvB;IACA,OAAO,IAAI,CAACf,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACC,MAAM,WAAWW,KAAK,EAAE,CAAC;EACpE;EAEAC,aAAa;IACT;IACA,OAAO,IAAI,CAAChB,IAAI,CAACG,GAAG,CAAW,GAAGN,WAAW,CAACI,UAAU,UAAU,CAAC;EACvE;EAEAgB,YAAY,CAACC,IAAY;IACrB,OAAO,IAAI,CAAClB,IAAI,CAACO,IAAI,CAAS,GAAGV,WAAW,CAACI,UAAU,UAAU,EAAE;MAC/DiB;KACH,CAAC;EACN;EAEAC,aAAa,CAACV,EAAU;IACpB;IACA,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAS,GAAGN,WAAW,CAACI,UAAU,YAAYQ,EAAE,EAAE,CAAC;EAC3E;;AAjDSX,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;EAAAuB,YAFX;AAAM","names":["environment","CoursesService","constructor","http","apiBaseUrl","getAll","get","apiUrl","createCourse","course","post","editCourse","id","put","getCourse","deleteCourse","delete","filterCourses","value","getAllAuthors","createAuthor","name","getAuthorById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Duev\\Desktop\\EPAM-ACADEMY\\FRONT-END-SPECIALIZATION\\ANGULAR\\angular-fundamentals-template\\src\\app\\services\\courses.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { environment } from \"../../environments/environment\";\r\nimport { Course, Author } from \"../models\"; // Adjust the import path as needed\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class CoursesService {\r\n    private apiUrl = `${environment.apiBaseUrl}/courses`; // Base URL for the courses API\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    getAll(): Observable<Course[]> {\r\n        // Use Course[] instead of any[]\r\n        return this.http.get<Course[]>(this.apiUrl);\r\n    }\r\n\r\n    createCourse(course: Course): Observable<Course> {\r\n        // Use Course instead of any\r\n        return this.http.post<Course>(this.apiUrl, course);\r\n    }\r\n\r\n    editCourse(id: string, course: Course): Observable<Course> {\r\n        // Use Course instead of any\r\n        return this.http.put<Course>(`${this.apiUrl}/${id}`, course);\r\n    }\r\n\r\n    getCourse(id: string): Observable<Course> {\r\n        // Use Course instead of any\r\n        return this.http.get<Course>(`${this.apiUrl}/${id}`);\r\n    }\r\n\r\n    deleteCourse(id: string): Observable<any> {\r\n        // Can keep as any if there's no specific return type\r\n        return this.http.delete<Course>(`${this.apiUrl}/${id}`);\r\n    }\r\n\r\n    filterCourses(value: string): Observable<Course[]> {\r\n        // Use Course[] instead of any[]\r\n        return this.http.get<Course[]>(`${this.apiUrl}?search=${value}`);\r\n    }\r\n\r\n    getAllAuthors(): Observable<any[]> {\r\n        // Replace 'any[]' with your specific author interface if defined\r\n        return this.http.get<Author[]>(`${environment.apiBaseUrl}/authors`);\r\n    }\r\n\r\n    createAuthor(name: string): Observable<any> {\r\n        return this.http.post<Author>(`${environment.apiBaseUrl}/authors`, {\r\n            name,\r\n        });\r\n    }\r\n\r\n    getAuthorById(id: string): Observable<any> {\r\n        // Replace 'any' with your specific author interface if defined\r\n        return this.http.get<Author>(`${environment.apiBaseUrl}/authors/${id}`);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}